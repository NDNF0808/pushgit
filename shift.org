* 移位寄存器T99-B
** 设计说明
  本设计中，T99-B 有八位输入端(AUJ1in)和八位输出端(AUJ1out)分别连接在内部总线，移位寄存器的片选信号为T99-B，其在低电平时有效，S1,S0,M为移位控制信号，T4为其控制脉冲信号，T4是由“W/R UNIT”单元中的T4连接至“STATE UNIT”单元的单脉冲发生器KK2上而产生的，KK2在上升沿时有效。CY为进位位，其初始化为0.
  移位寄存器的功能为：在片选信号T99-B有效的情况下，通过控制S1,S0,M信号的值对输入的数AUJ1in进行移位运算（保持，循环右移，带进位循环右移，循环左移，带进位循环左移，装数）后，通过AUJ1out输出移位后的数值。 
** 接口信号
| sname   | swidth | stype  | data type | meaning        |
|---------+--------+--------+-----------+----------------|
| AUJ1in  | 8-bits | input  | wire      | input signal   |
| T99-B   | 1-bit  | input  | wire      | chip select    |
| S1      | 1-bit  | input  | wire      | control signal |
| S0      | 1-bit  | input  | wire      | control signal |
| M       | 1-bit  | input  | wire      | contral signal |
| T4      | 1-bit  | input  | wire      | pulse signal   |
| AUJ1out | 8-bits | output | reg       | output         |
| CY      | 1-bit  | output | reg       | carry bits     |
** 逻辑功能表 
|  T99-B | S1 | S0 |      M | function                   |
|--------+----+----+--------+----------------------------|
|      0 |  0 |  0 | random | maintain                   |
|      0 |  1 |  0 |      0 | rotate right               |
|      0 |  1 |  0 |      1 | rotate right through carry |
|      0 |  0 |  1 |      0 | rotate left                |
|      0 |  0 |  1 |      1 | rotate left through carry  |
| random |  1 |  1 | random | load data                  |
 

** 代码详解
#+BEGIN_SRC verilog 
module shift(
    /******************接口定义********************/
             input wire [7:0] AUJ1in;             
             output reg [7:0] AUJ1out;
             input            T99_B,S1,S0,M,T4;
             output           CY;
             reg              CY = 1'd0;
             always @(posedge T4)                                                 //定义在T4上升沿时控制信号相对应的操作
                 begin
                     if(T99_B == 0 && S1 == 0 && S0 == 0)                         //保持
                         AUJ1out = AUJ1out;
                     else if(T99_B == 0 && S1 == 1 && S0 == 0 && M == 0)          //循环右移
                         AUJ1out = {AUJ1out[0],AUJ1out[7:1]};
                     else if(T99_B == 0 && S1 == 1 && S0 == 0 && M == 1)          //带进位循环右移
                         {CY,AUJ1out} = {AUJ1out[0],CY,AUJ1out[7:1]};
                     else if(T99_B == 0 && S1 == 0 && S0 == 1 && M == 0)          //循环左移
                         AUJ1out = {AUJ1out[6:0],AUJ1out[7]};
                     else if(T99_B == 0 && S1 == 0 && S0 == 1 && M == 1)          //带进位循环左移
                         {CY,AUJ1out} = {AUJ1out[7:0],CY};
                     else if( S1 == 1 && S0 == 1)                                 //装数
                         AUJ1out = AUJ1in;
                     else  
                         AUJ1out = 8'dz;                                          //其他情况下为高//阻态
                 end  // always @ (posedge T4)
endmodule // shift
 
#+END_SRC

** 测试程序

#+BEGIN_SRC verilog
`timescale 1ns/1ns                                                               
`include "./shift.v"                                                              //将shift.v源文件包含
module shift_test;
/*********接口定义*************/
    reg  [7:0] AUJ1in1;
    wire [7:0] AUJ1out1;
    reg        T99_B1;
    reg        S11;
    reg        S01;
    reg        M1;
    reg        T41;
    wire       CY1;
/******初始化各测试接口*******/
    initial                                                                      //初始化时钟信号
        begin
            #0 T41 = 1'd0;
        forever  #5 T41 = ~T41;
        end
    initial                                                                      //初始化输入的值并将控制信号设置为装数
        begin
           T99_B1 = 1'd0;
           S11 = 1'd1;
           S01 = 1'd1;
           AUJ1in1 = 8'd11;
           #10 AUJ1in1 = 8'd15;
           #10 AUJ1in1 = 8'd45;
        end
    initial                                                                     //随机产生控制信号的值
        begin
           repeat(6)
               #10 begin 
                T99_B = {$random} % 2;
                S11 = {$random} % 2;
                S01 = {$random} % 2;
                M = {$random} % 2;
            end
        end 
    shift shift(                                                               //调用shift函数
                .AUJ1in(AUJ1in1),
                .AUJ1out(AUJ1out1),
                .T99_B(T99_B1), 
                .S1(S11),
                .S0(S01),
                .M(M1), 
                .T4(T41),
                .CY(CY1)
                );
    initial                                                                    //生成波形图
        begin                  
            $dumpfile("shift.vcd");
            $dumpvars(0,shift_test);
        end // UNMATCHED !!
endmodule // shift_test
#+END_SRC
